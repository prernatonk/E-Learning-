import os
import datetime
from flask import Flask, request, jsonify
import firebase_admin
from firebase_admin import credentials, firestore
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")

# Firebase Initialization
if not firebase_admin._apps:
    cred = credentials.Certificate(cred_path)
    firebase_admin.initialize_app(cred)

db = firestore.client()
app = Flask(__name__)

# ----------- Teacher Functions -----------

@app.route("/upload_note", methods=["POST"])
def upload_note():
    data = request.json
    note = {
        'title': data['title'],
        'description': data['description'],
        'file_type': data['file_type'],
        'teacher_id': data['teacher_id'],
        'upload_time': datetime.datetime.utcnow()
    }
    db.collection('class_notes').add(note)
    return jsonify({"message": "Note uploaded successfully."})

@app.route("/create_quiz", methods=["POST"])
def create_quiz():
    data = request.json
    db.collection('quizzes').document(data['quiz_id']).set({
        'questions': data['questions'],
        'created_at': datetime.datetime.utcnow()
    })
    return jsonify({"message": "Quiz created successfully."})

# ----------- Student Functions -----------

@app.route("/get_notes", methods=["GET"])
def get_notes():
    notes_ref = db.collection('class_notes')
    notes = notes_ref.stream()
    return jsonify([note.to_dict() for note in notes])

@app.route("/attempt_quiz", methods=["POST"])
def attempt_quiz():
    data = request.json
    quiz_ref = db.collection('quizzes').document(data['quiz_id'])
    quiz_data = quiz_ref.get().to_dict()

    if not quiz_data:
        return jsonify({"message": "Quiz not found."})

    score = 0
    for i, q in enumerate(quiz_data['questions']):
        if q['answer'] == data['answers'][i]:
            score += 1

    result = {
        'quiz_id': data['quiz_id'],
        'score': score,
        'submitted_at': datetime.datetime.utcnow()
    }
    db.collection('quiz_results').add(result)
    return jsonify({"message": f"Quiz submitted. Score: {score}/{len(quiz_data['questions'])}"})


if __name__ == "__main__":
    app.run(debug=True)
